package com.hbird.base.mvp.model.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hbird.base.mvc.bean.WaterOrderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WATER_ORDER_BEAN".
*/
public class WaterOrderBeanDao extends AbstractDao<WaterOrderBean, Void> {

    public static final String TABLENAME = "WATER_ORDER_BEAN";

    /**
     * Properties of entity WaterOrderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Money = new Property(1, Double.class, "money", false, "MONEY");
        public final static Property AccountBookId = new Property(2, Integer.class, "accountBookId", false, "ACCOUNT_BOOK_ID");
        public final static Property OrderType = new Property(3, Integer.class, "orderType", false, "ORDER_TYPE");
        public final static Property IsStaged = new Property(4, Integer.class, "isStaged", false, "IS_STAGED");
        public final static Property SpendHappiness = new Property(5, Integer.class, "spendHappiness", false, "SPEND_HAPPINESS");
        public final static Property UseDegree = new Property(6, Integer.class, "useDegree", false, "USE_DEGREE");
        public final static Property TypePid = new Property(7, String.class, "typePid", false, "TYPE_PID");
        public final static Property TypePname = new Property(8, String.class, "typePname", false, "TYPE_PNAME");
        public final static Property TypeId = new Property(9, String.class, "typeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(10, String.class, "typeName", false, "TYPE_NAME");
        public final static Property ParentId = new Property(11, Integer.class, "parentId", false, "PARENT_ID");
        public final static Property PictureUrl = new Property(12, String.class, "pictureUrl", false, "PICTURE_URL");
        public final static Property UpdateDate = new Property(13, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property CreateDate = new Property(14, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property ChargeDate = new Property(15, String.class, "chargeDate", false, "CHARGE_DATE");
        public final static Property Delflag = new Property(16, Integer.class, "delflag", false, "DELFLAG");
        public final static Property DelDate = new Property(17, java.util.Date.class, "delDate", false, "DEL_DATE");
        public final static Property CreateBy = new Property(18, Integer.class, "createBy", false, "CREATE_BY");
        public final static Property CreateName = new Property(19, String.class, "createName", false, "CREATE_NAME");
        public final static Property UpdateBy = new Property(20, Integer.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateName = new Property(21, String.class, "updateName", false, "UPDATE_NAME");
        public final static Property Remark = new Property(22, String.class, "remark", false, "REMARK");
        public final static Property Icon = new Property(23, String.class, "icon", false, "ICON");
    }


    public WaterOrderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WaterOrderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WATER_ORDER_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"MONEY\" REAL," + // 1: money
                "\"ACCOUNT_BOOK_ID\" INTEGER," + // 2: accountBookId
                "\"ORDER_TYPE\" INTEGER," + // 3: orderType
                "\"IS_STAGED\" INTEGER," + // 4: isStaged
                "\"SPEND_HAPPINESS\" INTEGER," + // 5: spendHappiness
                "\"USE_DEGREE\" INTEGER," + // 6: useDegree
                "\"TYPE_PID\" TEXT," + // 7: typePid
                "\"TYPE_PNAME\" TEXT," + // 8: typePname
                "\"TYPE_ID\" TEXT," + // 9: typeId
                "\"TYPE_NAME\" TEXT," + // 10: typeName
                "\"PARENT_ID\" INTEGER," + // 11: parentId
                "\"PICTURE_URL\" TEXT," + // 12: pictureUrl
                "\"UPDATE_DATE\" INTEGER," + // 13: updateDate
                "\"CREATE_DATE\" INTEGER," + // 14: createDate
                "\"CHARGE_DATE\" TEXT," + // 15: chargeDate
                "\"DELFLAG\" INTEGER," + // 16: delflag
                "\"DEL_DATE\" INTEGER," + // 17: delDate
                "\"CREATE_BY\" INTEGER," + // 18: createBy
                "\"CREATE_NAME\" TEXT," + // 19: createName
                "\"UPDATE_BY\" INTEGER," + // 20: updateBy
                "\"UPDATE_NAME\" TEXT," + // 21: updateName
                "\"REMARK\" TEXT," + // 22: remark
                "\"ICON\" TEXT);"); // 23: icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WATER_ORDER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WaterOrderBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Double money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(2, money);
        }
 
        Integer accountBookId = entity.getAccountBookId();
        if (accountBookId != null) {
            stmt.bindLong(3, accountBookId);
        }
 
        Integer orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindLong(4, orderType);
        }
 
        Integer isStaged = entity.getIsStaged();
        if (isStaged != null) {
            stmt.bindLong(5, isStaged);
        }
 
        Integer spendHappiness = entity.getSpendHappiness();
        if (spendHappiness != null) {
            stmt.bindLong(6, spendHappiness);
        }
 
        Integer useDegree = entity.getUseDegree();
        if (useDegree != null) {
            stmt.bindLong(7, useDegree);
        }
 
        String typePid = entity.getTypePid();
        if (typePid != null) {
            stmt.bindString(8, typePid);
        }
 
        String typePname = entity.getTypePname();
        if (typePname != null) {
            stmt.bindString(9, typePname);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(10, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(11, typeName);
        }
 
        Integer parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(12, parentId);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(13, pictureUrl);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(14, updateDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(15, createDate.getTime());
        }
 
        String chargeDate = entity.getChargeDate();
        if (chargeDate != null) {
            stmt.bindString(16, chargeDate);
        }
 
        Integer delflag = entity.getDelflag();
        if (delflag != null) {
            stmt.bindLong(17, delflag);
        }
 
        java.util.Date delDate = entity.getDelDate();
        if (delDate != null) {
            stmt.bindLong(18, delDate.getTime());
        }
 
        Integer createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindLong(19, createBy);
        }
 
        String createName = entity.getCreateName();
        if (createName != null) {
            stmt.bindString(20, createName);
        }
 
        Integer updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindLong(21, updateBy);
        }
 
        String updateName = entity.getUpdateName();
        if (updateName != null) {
            stmt.bindString(22, updateName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(23, remark);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(24, icon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WaterOrderBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Double money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(2, money);
        }
 
        Integer accountBookId = entity.getAccountBookId();
        if (accountBookId != null) {
            stmt.bindLong(3, accountBookId);
        }
 
        Integer orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindLong(4, orderType);
        }
 
        Integer isStaged = entity.getIsStaged();
        if (isStaged != null) {
            stmt.bindLong(5, isStaged);
        }
 
        Integer spendHappiness = entity.getSpendHappiness();
        if (spendHappiness != null) {
            stmt.bindLong(6, spendHappiness);
        }
 
        Integer useDegree = entity.getUseDegree();
        if (useDegree != null) {
            stmt.bindLong(7, useDegree);
        }
 
        String typePid = entity.getTypePid();
        if (typePid != null) {
            stmt.bindString(8, typePid);
        }
 
        String typePname = entity.getTypePname();
        if (typePname != null) {
            stmt.bindString(9, typePname);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(10, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(11, typeName);
        }
 
        Integer parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(12, parentId);
        }
 
        String pictureUrl = entity.getPictureUrl();
        if (pictureUrl != null) {
            stmt.bindString(13, pictureUrl);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(14, updateDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(15, createDate.getTime());
        }
 
        String chargeDate = entity.getChargeDate();
        if (chargeDate != null) {
            stmt.bindString(16, chargeDate);
        }
 
        Integer delflag = entity.getDelflag();
        if (delflag != null) {
            stmt.bindLong(17, delflag);
        }
 
        java.util.Date delDate = entity.getDelDate();
        if (delDate != null) {
            stmt.bindLong(18, delDate.getTime());
        }
 
        Integer createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindLong(19, createBy);
        }
 
        String createName = entity.getCreateName();
        if (createName != null) {
            stmt.bindString(20, createName);
        }
 
        Integer updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindLong(21, updateBy);
        }
 
        String updateName = entity.getUpdateName();
        if (updateName != null) {
            stmt.bindString(22, updateName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(23, remark);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(24, icon);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WaterOrderBean readEntity(Cursor cursor, int offset) {
        WaterOrderBean entity = new WaterOrderBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // money
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // accountBookId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // orderType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // isStaged
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // spendHappiness
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // useDegree
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // typePid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // typePname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // typeId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // typeName
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // parentId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pictureUrl
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // updateDate
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // createDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // chargeDate
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // delflag
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // delDate
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // createBy
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // createName
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // updateBy
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // updateName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // remark
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // icon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WaterOrderBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMoney(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setAccountBookId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setOrderType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsStaged(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSpendHappiness(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUseDegree(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTypePid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTypePname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTypeId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTypeName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParentId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPictureUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdateDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setCreateDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setChargeDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDelflag(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setDelDate(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setCreateBy(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setCreateName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdateBy(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setUpdateName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRemark(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIcon(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WaterOrderBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WaterOrderBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(WaterOrderBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
