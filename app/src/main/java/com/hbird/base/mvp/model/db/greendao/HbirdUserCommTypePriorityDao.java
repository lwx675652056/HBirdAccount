package com.hbird.base.mvp.model.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hbird.base.mvp.model.entity.table.HbirdUserCommTypePriority;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HBIRD_USER_COMM_TYPE_PRIORITY".
*/
public class HbirdUserCommTypePriorityDao extends AbstractDao<HbirdUserCommTypePriority, Void> {

    public static final String TABLENAME = "HBIRD_USER_COMM_TYPE_PRIORITY";

    /**
     * Properties of entity HbirdUserCommTypePriority.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property UserInfoId = new Property(1, Integer.class, "userInfoId", false, "USER_INFO_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property CreateDate = new Property(3, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Relation = new Property(4, String.class, "relation", false, "RELATION");
        public final static Property UpdateDate = new Property(5, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
    }


    public HbirdUserCommTypePriorityDao(DaoConfig config) {
        super(config);
    }
    
    public HbirdUserCommTypePriorityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HBIRD_USER_COMM_TYPE_PRIORITY\" (" + //
                "\"ID\" INTEGER UNIQUE ," + // 0: id
                "\"USER_INFO_ID\" INTEGER," + // 1: userInfoId
                "\"TYPE\" INTEGER," + // 2: type
                "\"CREATE_DATE\" INTEGER," + // 3: createDate
                "\"RELATION\" TEXT," + // 4: relation
                "\"UPDATE_DATE\" INTEGER);"); // 5: updateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HBIRD_USER_COMM_TYPE_PRIORITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HbirdUserCommTypePriority entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userInfoId = entity.getUserInfoId();
        if (userInfoId != null) {
            stmt.bindLong(2, userInfoId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(5, relation);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(6, updateDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HbirdUserCommTypePriority entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userInfoId = entity.getUserInfoId();
        if (userInfoId != null) {
            stmt.bindLong(2, userInfoId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(4, createDate.getTime());
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(5, relation);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(6, updateDate.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HbirdUserCommTypePriority readEntity(Cursor cursor, int offset) {
        HbirdUserCommTypePriority entity = new HbirdUserCommTypePriority( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userInfoId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // relation
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // updateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HbirdUserCommTypePriority entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setUserInfoId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCreateDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setRelation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HbirdUserCommTypePriority entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HbirdUserCommTypePriority entity) {
        return null;
    }

    @Override
    public boolean hasKey(HbirdUserCommTypePriority entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
