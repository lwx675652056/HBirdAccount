package com.hbird.base.mvp.model.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hbird.base.mvp.model.entity.table.HbirdSpendType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HBIRD_SPEND_TYPE".
*/
public class HbirdSpendTypeDao extends AbstractDao<HbirdSpendType, Void> {

    public static final String TABLENAME = "HBIRD_SPEND_TYPE";

    /**
     * Properties of entity HbirdSpendType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property SpendName = new Property(1, String.class, "spendName", false, "SPEND_NAME");
        public final static Property ParentId = new Property(2, String.class, "parentId", false, "PARENT_ID");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Priority = new Property(5, Integer.class, "priority", false, "PRIORITY");
        public final static Property Mark = new Property(6, Integer.class, "mark", false, "MARK");
        public final static Property UpdateDate = new Property(7, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property CreateDate = new Property(8, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Delflag = new Property(9, Integer.class, "delflag", false, "DELFLAG");
        public final static Property DelDate = new Property(10, java.util.Date.class, "delDate", false, "DEL_DATE");
    }


    public HbirdSpendTypeDao(DaoConfig config) {
        super(config);
    }
    
    public HbirdSpendTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HBIRD_SPEND_TYPE\" (" + //
                "\"ID\" TEXT UNIQUE ," + // 0: id
                "\"SPEND_NAME\" TEXT," + // 1: spendName
                "\"PARENT_ID\" TEXT," + // 2: parentId
                "\"ICON\" TEXT," + // 3: icon
                "\"STATUS\" TEXT," + // 4: status
                "\"PRIORITY\" INTEGER," + // 5: priority
                "\"MARK\" INTEGER," + // 6: mark
                "\"UPDATE_DATE\" INTEGER," + // 7: updateDate
                "\"CREATE_DATE\" INTEGER," + // 8: createDate
                "\"DELFLAG\" INTEGER," + // 9: delflag
                "\"DEL_DATE\" INTEGER);"); // 10: delDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HBIRD_SPEND_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HbirdSpendType entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String spendName = entity.getSpendName();
        if (spendName != null) {
            stmt.bindString(2, spendName);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(3, parentId);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(6, priority);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(7, mark);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(8, updateDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(9, createDate.getTime());
        }
 
        Integer delflag = entity.getDelflag();
        if (delflag != null) {
            stmt.bindLong(10, delflag);
        }
 
        java.util.Date delDate = entity.getDelDate();
        if (delDate != null) {
            stmt.bindLong(11, delDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HbirdSpendType entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String spendName = entity.getSpendName();
        if (spendName != null) {
            stmt.bindString(2, spendName);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(3, parentId);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(6, priority);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(7, mark);
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(8, updateDate.getTime());
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(9, createDate.getTime());
        }
 
        Integer delflag = entity.getDelflag();
        if (delflag != null) {
            stmt.bindLong(10, delflag);
        }
 
        java.util.Date delDate = entity.getDelDate();
        if (delDate != null) {
            stmt.bindLong(11, delDate.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HbirdSpendType readEntity(Cursor cursor, int offset) {
        HbirdSpendType entity = new HbirdSpendType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // spendName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // priority
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // mark
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // updateDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createDate
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // delflag
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // delDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HbirdSpendType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSpendName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPriority(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMark(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUpdateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setCreateDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setDelflag(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDelDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HbirdSpendType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HbirdSpendType entity) {
        return null;
    }

    @Override
    public boolean hasKey(HbirdSpendType entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
